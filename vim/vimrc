" based on http://github.com/jferris/config_files/blob/master/vimrc
" also based on Janus

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off

" fzf requires that we know where to find the executable
" set rtp+=~/.fzf

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins

"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Ctrl-p for fuzzy-finding
Plugin 'kien/ctrlp.vim' 
Plugin 'FelikZ/ctrlp-py-matcher'
" set rtp+=~/.fzf
" Plugin 'junegunn/fzf.vim' " only opens fzf in an external window :/

Plugin 'vim-ruby/vim-ruby', {'for': 'ruby'} " Ruby linter
Plugin 'tpope/vim-fugitive' " Git stuff
Plugin 'ervandew/supertab' " Tab completion
Plugin 'mileszs/ack.vim' " ack/ag integration
" Plugin 'xolox/vim-misc' " Auto-ctagging
" Plugin 'xolox/vim-easytags' " Auto-ctagging
Plugin 'scrooloose/nerdtree' " file drawer
Plugin 'scrooloose/nerdcommenter' " comment tools
Plugin 'ngmy/vim-rubocop' " rubocop integration
Plugin 'vim-syntastic/syntastic' " Linting
Plugin 'fatih/vim-go' " Go support
" Plugin 'w0rp/ale' " better linting - disabled for crashes
Plugin 'itchyny/lightline.vim' " status line
Plugin 'ludovicchabant/vim-gutentags' " automatic ctag regeneration
Plugin 'b4b4r07/vim-hcl' " HCL highlighting (for terraform)
Plugin 'hashivim/vim-terraform' " terraform integration & syntax
Plugin 'juliosueiras/vim-terraform-completion' " terraform completion & ctags
Plugin 'airblade/vim-gitgutter' " git status displayed in vim gutter
Plugin 'ycm-core/YouCompleteMe' " Python autocomplete

call vundle#end()            " required

" workaround for NERDTree bugs WTF
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeGlyphReadOnly = "RO"

" ALE configs
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_enter = 0
" " let g:airline#extensions#ale#enabled = 1
" let g:ale_open_list = 1

" lightline configs
let g:lightline = {
  \ 'colorscheme': 'wombat',
  \ 'component_function': {
  \   'filename': 'LightLineFilename'
  \ }
  \ }
function! LightLineFilename()
  return expand('%')
endfunction

" launch fzf in iterm2
let g:fzf_launcher = "~/.bin/launchable_iterm2 %s" 

" Ctrl-P config
" use ctrlp-py-matcher
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }


" Set file encodings to use utf-8 wherever possible
if has("multi_byte")
  if &termencoding == ""
    let &termencoding = &encoding
  endif
  set encoding=utf-8
  setglobal fileencoding=utf-8
  "setglobal bomb
  set fileencodings=ucs-bom,utf-8,latin1
endif


" don't syntax-highlight on long lines
" it causes big performance issues
set synmaxcol=200

" \ is the default leader character, set it to SPACEBAR instead
let mapleader=','

" Numbers
set number
set numberwidth=5

" show the cursor position all the time
set ruler

" Set encoding
set encoding=utf-8

" More natural split opening
set splitbelow
set splitright

" Whitespace stuff
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
" set list listchars=tab:\ \ ,trail:·
set list listchars=tab:»·,trail:·
" Automatically strip trailing whitespace from selected filetypes
autocmd FileType ruby,python,javascript autocmd BufWritePre <buffer> :%s/\s\+$//e

" Set syntax folding to automatic but unfolded by default
" For Ruby files, have to use indent folding, syntax folding is too slow
set foldmethod=indent
set foldlevelstart=99

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,.svg,vendor/gems/*

" Stripe-specific (gross)
set wildignore+=build/autoloader


" Status bar
set laststatus=2

" allow backspacing over everything in insert mode
set backspace=indent,eol,start


" run `terraform fmt` on save when working in terraform
let g:terraform_fmt_on_save = 1

" Without setting this, ZoomWin restores windows in a way that causes
" equalalways behavior to be triggered the next time CommandT is used.
" This is likely a bludgeon to solve some other issue, but it works
set noequalalways

" NERDTree configuration
let NERDTreeIgnore=['\.pyc$', '\.rbc$', '\~$']
map <Leader>n :NERDTreeToggle<CR>
" set variables NERDTree wants to reference later
" this should be done by the plugin, not sure why it's not
let g:NERDTreeNodeDelimiter = "\x07"

" Command-T configuration
let g:CommandTMaxHeight=20
let g:CommandTWildIgnore=&wildignore . ",build/**/**"

" ZoomWin configuration
map <Leader><Leader> :ZoomWin<CR>

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <C-\> :tnext<CR>

" set up RuboCop mapping
let g:vimrubocop_keymap = 0
nmap <Leader>r :RuboCop<CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function s:setupWrapping()
  set wrap
  set wrapmargin=0
  set textwidth=0
endfunction

function s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Hammer<CR>
endfunction

" modify wildignore - important for Cmd-T, among other things
set wildignore+=node_modules

" activate ctrl-p
set runtimepath^=~/.vim/bundle/ctrlp.vim

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" add json syntax highlighting
au BufNewFile,BufRead *.json set ft=javascript

" add backbone JST template syntax highlighting
au BufNewFile,BufRead *.jst.ejs set ft=html

au BufRead,BufNewFile *.txt call s:setupWrapping()

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" use ripgrep instead of grep  or ack
if executable('rg')
  set grepprg=rg\ --vimgrep
  let g:ctrlp_user_command = 'rg %s --files --color=never --glob ""'
  let g:ctrlp_use_caching = 0

  let g:ackprg = 'rg --vimgrep --no-heading'
endif


" use Ag instead of Ack
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
  let g:ackprg = 'ag --nogroup --nocolor --column'
endif

" Use Ack instead of Grep when available
" if executable("ack")
"   set grepprg=ack\ -H\ --nogroup\ --nocolor\ --ignore-dir=tmp\ --ignore-dir=coverage
" endif

" load the plugin and indent settings for the detected filetype
filetype plugin indent on

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Switch ' and `; more useful mark-jumping
nnoremap ' `
nnoremap ` '

" Insert hashrocket in insert mode
imap <C-l> <Space>=><Space>

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_messages = {'level': 'warnings'}

" gist-vim defaults
if has("mac")
  let g:gist_clip_command = 'pbcopy'
elseif has("unix")
  let g:gist_clip_command = 'xclip -selection clipboard'
endif
let g:gist_detect_filetype = 1
let g:gist_open_browser_after_post = 1

" Use modeline overrides
set modeline
set modelines=10

" Default color scheme
" color desert

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" Turn off jslint errors by default
let g:JSLintHighlightErrorLine = 0

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

" Show (partial) command in the status line
set showcmd

" Hide search highlighting
map <Leader>h :set invhls <CR>

" use w!! to write with sudo when you forgot to sudo
cmap w!! %!sudo tee > /dev/null %

" Include user's local vim config
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" END OF JANUS
"
" set nobackup
" set nowritebackup
" set history=250		" keep 250 lines of command line history
" set incsearch		" do incremental searching

" Edit the README_FOR_APP (makes :R commands work)
" map <Leader>R :e doc/README_FOR_APP<CR>

" Leader shortcuts for Rails commands
" map <Leader>m :Rmodel 
" map <Leader>c :Rcontroller 
" map <Leader>v :Rview 
" map <Leader>u :Runittest 
" map <Leader>f :Rfunctionaltest 
" map <Leader>tm :RTmodel 
" map <Leader>tc :RTcontroller 
" map <Leader>tv :RTview 
" map <Leader>tu :RTunittest 
" map <Leader>tf :RTfunctionaltest 
" map <Leader>sm :RSmodel 
" map <Leader>sc :RScontroller 
" map <Leader>sv :RSview 
" map <Leader>su :RSunittest 
" map <Leader>sf :RSfunctionaltest 

" Opens an edit command with the path of the currently edited file filled in
" Normal mode: <Leader>e
" map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>

" Opens a tab edit command with the path of the currently edited file filled in
" Normal mode: <Leader>t
" map <Leader>te :tabe <C-R>=expand("%:p:h") . "/" <CR>

" Inserts the path of the currently edited file into a command
" Command mode: Ctrl+P
" cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" Duplicate a selection
" Visual mode: D
" vmap D y'>p

" Press Shift+P while in visual mode to replace the selection without
" overwriting the default register
" vmap P p :call setreg('"', getreg('0')) <CR>

" For Haml
" au! BufRead,BufNewFile *.haml         setfiletype haml

" Yank from the cursor to the end of the line, to be consistent with C and D.
" nnoremap Y y$

" No Help, please
" nmap <F1> <Esc>

" Press ^F from insert mode to insert the current file name
" imap <C-F> <C-R>=expand("%")<CR>

" Maps autocomplete to tab
" imap <Tab> <C-N>

" imap <C-L> <Space>=><Space>

" Display extra whitespace
" set list listchars=tab:»·,trail:·

" Edit routes
" command! Rroutes :e config/routes.rb
" command! Rschema :e db/schema.rb

" Local config
" if filereadable(".vimrc.local")
"   source .vimrc.local
" endif

" Now folded into .gvimrc
" Color scheme
" colorscheme ir_black
" colorscheme vividchalk
" highlight NonText guibg=#060606
" highlight Folded  guibg=#0A0A0A guifg=#9090D0

" Snippets are activated by Shift+Tab
" let g:snippetsEmu_key = "<S-Tab>"

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
" set completeopt=longest,menu
" set wildmode=list:longest,list:full
" set complete=.,t

" case only matters with mixed case expressions
" set ignorecase
" set smartcase

" Tags
" let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"
" set tags=./tags;

" let g:fuf_splitPathMatching=1

" Open URL
" command -bar -nargs=1 OpenURL :!open <args>
" function! OpenURL()
"   let s:uri = matchstr(getline("."), '[a-z]*:\/\/[^ >,;:]*')
"   echo s:uri
"   if s:uri != ""
" 	  exec "!open \"" . s:uri . "\""
"   else
" 	  echo "No URI found in line."
"   endif
" endfunction
" map <Leader>w :call OpenURL()<CR>

"Easy empty line insertion in normal mode
" nnoremap <Return> o<Esc>k0
" nnoremap <S-Return> O<Esc>j0

" Customize mappings for RubyTest.vim
" map <D-R> <Plug>RubyTestRun   
" map <D-r> <Plug>RubyFileRun    
" map <D-i> <Plug>RubyTestRunLast
" let g:rubytest_in_quickfix = 1

" Mappings for ruby_focused_unit_test.vim
map <silent> <Leader>rb :RunAllRubyTests<CR>
map <silent> <Leader>rc :RunRubyFocusedContext<CR>
map <silent> <Leader>rf :RunRubyFocusedUnitTest<CR>

" window
" nmap <leader>swh :topleft  vnew<CR>
" nmap <leader>swl :botright vnew<CR>
" nmap <leader>swk :topleft  new<CR>
" nmap <leader>swj :botright new<CR>
" buffer
" nmap <leader>sh :leftabove  vnew<CR>
" nmap <leader>sl :rightbelow vnew<CR>
" nmap <leader>sk :leftabove  new<CR>
" nmap <leader>sj :rightbelow new<CR>
